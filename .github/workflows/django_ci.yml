name: Django CI

on:
  push:
    branches: [ "*" ]  # 모든 브랜치에 대해 push 이벤트 감지
  pull_request:
    types: [closed]
    branches: [ "main", "develop" ]

env:
  DOCKER_IMAGE: joonhoseong/allthe  # Docker Hub 레포지토리 이름

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    
    - name: Create .env file for testing
      run: |
        cat << EOF > .env
        DB_ENGINE=${{ secrets.DB_ENGINE }}
        DB_NAME=${{ secrets.DB_NAME }}
        DB_USER=${{ secrets.DB_USER }}
        DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        DB_HOST=${{ secrets.DB_HOST }}
        DB_PORT=${{ secrets.DB_PORT }}
        KAKAO_APP_KEY=${{ secrets.KAKAO_APP_KEY }}
        KAKAO_SECRET=${{ secrets.KAKAO_SECRET }}
        KAKAO_URI=${{ secrets.KAKAO_URI }}
        GOOGLE_APP_KEY=${{ secrets.GOOGLE_APP_KEY }}
        GOOGLE_SECRET=${{ secrets.GOOGLE_SECRET }}
        GOOGLE_URI=${{ secrets.GOOGLE_URI }}
        NAVER_APP_KEY=${{ secrets.NAVER_APP_KEY }}
        NAVER_SECRET=${{ secrets.NAVER_SECRET }}
        NAVER_URI=${{ secrets.NAVER_URI }}
        FRONT_DOMAIN=${{ secrets.FRONT_DOMAIN }}
        PORTONE_APP_KEY=${{ secrets.PORTONE_APP_KEY }}
        PORTONE_SECRET=${{ secrets.PORTONE_SECRET }}
        PORTONE_CHANNEL_KEY=${{ secrets.PORTONE_CHANNEL_KEY }}
        EOF
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run Django server and test
      run: |
        cd allthe
        python manage.py migrate
        python manage.py runserver &
        sleep 5
        if ! curl -s http://localhost:8000 > /dev/null; then
          echo "Django server is not running"
          exit 1
        fi
    
    - name: Remove .env file
      run: rm .env

  build-and-push:
    needs: test
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true && (github.base_ref == 'main' || github.base_ref == 'develop')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    
    - name: Login to DockerHub
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Generate image tags
      id: tag
      run: |
        if [[ ${{ github.base_ref }} == 'main' ]]; then
          echo "::set-output name=tags::${{ env.DOCKER_IMAGE }}:latest,${{ env.DOCKER_IMAGE }}:stable"
        elif [[ ${{ github.base_ref }} == 'develop' ]]; then
          echo "::set-output name=tags::${{ env.DOCKER_IMAGE }}:develop"
        fi
    
    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ steps.tag.outputs.tags }}