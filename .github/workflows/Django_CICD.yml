name: Django CI/CD

on:
  push:
    branches: [ '*' ]  # 모든 브랜치에 푸시될 때 CI 실행
  pull_request:
    branches: [ develop ]  # develop 브랜치에 대한 pull request가 merge될 때 CD 실행
    types: [ closed ]

jobs:
  build:  # CI 작업
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose

    - name: Build and run tests
      env: 
        DB_ENGINE: ${{ secrets.DB_ENGINE }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
      run: |
        # .env 파일 생성
        echo "DB_ENGINE=$DB_ENGINE" >> .env
        echo "DB_NAME=$DB_NAME" >> .env
        echo "DB_USER=$DB_USER" >> .env
        echo "DB_PASSWORD=$DB_PASSWORD" >> .env
        echo "DB_HOST=$DB_HOST" >> .env
        echo "DB_PORT=$DB_PORT" >> .env

        # docker-compose를 사용하여 빌드 및 서버 실행 (이미지 이름은 docker-compose.yml에서 설정)
        docker-compose up -d --build 
        
        # wait-for-it.sh 스크립트에 실행 권한 부여
        chmod +x wait-for-it.sh

        # Django 서버가 뜰 때까지 대기 (wait-for-it.sh 사용)
        ./wait-for-it.sh localhost:8000 --strict --timeout=30 -- echo "Django server is up!" 

        # Django 서버 응답 확인 (curl 사용)
        curl -s http://localhost:8000 > /dev/null
        if [ $? -eq 0 ]; then
          echo "Django server responded successfully!"
        else
          echo "Django server failed to respond."
          exit 1  # 에러 발생 시 workflow 실패 처리
        fi

        # 컨테이너 중지 및 삭제
        docker-compose down

        # .env 파일 삭제
        rm .env

  deploy:  # CD 작업
    runs-on: ubuntu-latest
    needs: build  # CI 작업 성공 후 실행
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true  # PR이 merge 되었을 때만 실행

    steps:
    - name: Deploy to NCP server
      env:
        DB_ENGINE: ${{ secrets.DB_ENGINE }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
        NCP_SERVER_IP: ${{ secrets.NCP_SERVER_IP }}
        NCP_SSH_PRIVATE_KEY: ${{ secrets.NCP_SSH_PRIVATE_KEY }}
        REPO_URL: ${{ secrets.REPO_URL }} # 레포지토리 URL 추가
      run: |
        # SSH 키 등록
        mkdir -p ~/.ssh
        echo "$NCP_SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

        # NCP 서버에 접속하여 배포 스크립트 실행
        ssh -o StrictHostKeyChecking=no root@$NCP_SERVER_IP "
          # 작업 디렉토리 설정 (디렉토리 생성 포함)
          mkdir -p /home/ubuntu/oz_03_collabo-003-BE && \
          cd /home/ubuntu/oz_03_collabo-003-BE && \

          # 레포지토리가 존재하지 않으면 clone, 존재하면 pull
          if [ ! -d .git ]; then
            git clone $REPO_URL .
            git checkout develop
          else
            git pull origin develop
          fi

          # .env 파일 생성 (heredoc 사용, NCP 서버에서 실행)
          cat <<EOF > .env
          DB_ENGINE=$DB_ENGINE
          DB_NAME=$DB_NAME
          DB_USER=$DB_USER
          DB_PASSWORD=$DB_PASSWORD
          DB_HOST=$DB_HOST
          DB_PORT=$DB_PORT
          EOF && \

          # 배포 스크립트 실행 
          bash ./deploy.sh
        "