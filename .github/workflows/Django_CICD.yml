name: Django CI/CD

on:
  push:
    branches: [ '*' ]  # 모든 브랜치에 푸시될 때 CI 실행
  pull_request:
    branches: [ '*' ]  # 모든 브랜치에 대한 pull request 생성 시 CI 실행

jobs:
  build:  # CI 작업
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose

    - name: Build and run tests
      env: 
        DB_ENGINE: ${{ secrets.DB_ENGINE }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
      run: |
        # .env 파일 생성
        echo "DB_ENGINE=$DB_ENGINE" >> .env
        echo "DB_NAME=$DB_NAME" >> .env
        echo "DB_USER=$DB_USER" >> .env
        echo "DB_PASSWORD=$DB_PASSWORD" >> .env
        echo "DB_HOST=$DB_HOST" >> .env
        echo "DB_PORT=$DB_PORT" >> .env

        # docker-compose를 사용하여 빌드 및 테스트 실행
        docker-compose build
        docker-compose run --rm web python manage.py test

        # .env 파일 삭제
        rm .env

    - name: Build and push Docker image
      if: github.event_name == 'push' && github.ref == 'refs/heads/develop'  # develop 브랜치에 푸시될 때만 이미지 빌드 및 푸시
      run: |
        # Docker Hub 로그인 정보 설정 (GitHub Actions Secrets에서 가져오기)
        echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

        # Docker 이미지 태그 및 푸시
        docker tag allthe:latest ${{ secrets.DOCKER_USERNAME }}/allthe:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/allthe:latest

  deploy:  # CD 작업
    runs-on: ubuntu-latest
    needs: build  # CI 작업 성공 후 실행
    # develop 브랜치에 대한 pull request가 merge될 때만 실행
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'develop' 

    steps:
    - name: Deploy to NCP server
      env:
        DB_ENGINE: ${{ secrets.DB_ENGINE }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
        NCP_SERVER_IP: ${{ secrets.NCP_SERVER_IP }}
        NCP_SSH_PRIVATE_KEY: ${{ secrets.NCP_SSH_PRIVATE_KEY }}
        DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/allthe:latest  # Docker Hub 이미지 이름
      run: |
        # SSH 키 등록
        mkdir -p ~/.ssh
        echo "$NCP_SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

        # NCP 서버에 접속하여 배포 스크립트 실행
        ssh -o StrictHostKeyChecking=no root@$NCP_SERVER_IP "
          # 작업 디렉토리 설정 (디렉토리 생성 포함)
          mkdir -p /home/ubuntu/oz_03_collabo-003-BE && \
          cd /home/ubuntu/oz_03_collabo-003-BE && \
          # 저장소 업데이트 (git pull)
          git pull origin develop && \
          # .env 파일 생성 (heredoc 사용, NCP 서버에서 실행)
          cat <<EOF > .env
          DB_ENGINE=$DB_ENGINE
          DB_NAME=$DB_NAME
          DB_USER=$DB_USER
          DB_PASSWORD=$DB_PASSWORD
          DB_HOST=$DB_HOST
          DB_PORT=$DB_PORT
          EOF && \
          # Docker 이미지 pull
          docker-compose pull $DOCKER_IMAGE_NAME && \
          # 배포 스크립트 실행 (Docker 이미지 이름 전달)
          bash ./deploy.sh $DOCKER_IMAGE_NAME
        "